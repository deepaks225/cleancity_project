<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CleanCity</title>
    <link rel="stylesheet" href="/navbar.css">
    <link rel="stylesheet" href="/user.css">
    <link rel="stylesheet" href="/hamburger.css">
    <link rel="stylesheet" href="/report.css">
    <style>
        /* General styling for the form */
.report-form {
    display: flex;
    flex-direction: column;
    gap: 15px;
    padding: 20px;
}

/* Flexbox layout for dropdowns with aligned elements */
.report-form-row {
    display: flex;
    justify-content: space-between;
    gap: 20px;
    align-items: flex-start;
}

.report-form-row .report-input-container {
    display: flex;
    flex-direction: column;
    width: calc(50% - 10px); /* Adjust width for the dropdown boxes */
}

.report-input-container h3 {
    margin-bottom: 5px;
    font-size: 1rem;
}

.report-select {
    width: 100%;
    padding: 8px;
    font-size: 14px; /* Reduced size for dropdown */
    border-radius: 5px;
    border: 1px solid #ccc;
}

/* Input fields */
.report-input {
    width: 100%;
    padding: 10px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 5px;
    margin-bottom: 10px;
}

.report-input:focus, .report-select:focus {
    border-color: #4CAF50;
}

/* Submit Button */
.report-submit-btn {
    background-color: #4CAF50;
    color: white;
    padding: 12px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s;
}

.report-submit-btn:hover {
    background-color: #45a049;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .report-form-row {
        flex-direction: column;
    }

    .report-form-row .report-input-container {
        width: 100%;
    }
}

    </style>
</head>

<body>
    <header>
        <h1>Report Litter</h1>

        <div class="hamburger">
            <span></span>
            <span></span>
            <span></span>
        </div>

        <% if (locals.user) { %>
            <nav id="main-nav">
                <a href="/home">Home</a>
                <a href="/capture">Report Litter</a>
                <a href="/profile">Profile</a>
                <a href="/notifications">Notifications</a>
                <a href="/drives">Cleaning Drives</a>
                <a href="/logout">LogOut</a>
            </nav>
        <% } else { %>
            <nav id="main-nav">
                <a href="/">Home</a>
                <a href="/signin">SignIn</a>
                <a href="/signup">SignUp</a>
            </nav>
        <% } %>
    </header>

    <div class="inline">
        <video id="video" autoplay></video>
        <button id="capture">Capture</button>
    </div>

    <div class="inline">
        <canvas id="canvas"></canvas>
    </div>

    <form action="/upload" method="post" id="uploadForm" enctype="multipart/form-data" class="report-form">
        <input type="file" name="image" id="imageInput" style="display: none;">
        
        <div>
            <h2>Write your complaint</h2>
            <input type="text" name="complain" id="complain" placeholder="Describe the litter here..." class="report-input">
        </div>

        <div class="report-form-row">
            <input type="text" name="address" id="address" placeholder="Write the proper address of litter with landmark..." class="report-input">
        </div>

        <div class="report-form-row">
            <div class="report-input-container">
                <h3>Type of Waste</h3>
                <select name="category" id="category" class="report-select">
                    <option value="Electronic">Electronic</option>
                    <option value="Dry">Dry</option>
                    <option value="Wet">Wet</option>
                    <option value="Glass">Glass</option>
                    <option value="Plastic">Plastic</option>
                    <option value="RadioActive">RadioActive</option>
                </select>
            </div>

            <div class="report-input-container">
                <h3>Weight of Waste</h3>
                <select name="weight" id="weight" class="report-select">
                    <option value="Under 1kg">Under 1kg</option>
                    <option value="1-5kg">1-5kg</option>
                    <option value="5-10kg">5-10kg</option>
                    <option value="Above 10kg">Above 10kg</option>
                </select>
            </div>
        </div>

        <button type="submit" class="report-submit-btn">Upload</button>
    </form>

    <script>
        const video = document.getElementById('video');
        const canvas = document.getElementById('canvas');
        const captureButton = document.getElementById('capture');
        const uploadForm = document.getElementById('uploadForm');
        const imageInput = document.getElementById('imageInput');
        const complainInput = document.getElementById('complain');
        const address = document.getElementById('address');

        // Hamburger Menu Functionality
        const hamburger = document.querySelector('.hamburger');
        const nav = document.getElementById('main-nav');

        hamburger.addEventListener('click', () => {
            hamburger.classList.toggle('active');
            nav.classList.toggle('active');
        });

        const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);

        const constraints = {
            video: isMobile ? { facingMode: { ideal: "environment" } } : true
        };

        navigator.mediaDevices.getUserMedia(constraints)
            .then(stream => {
                video.srcObject = stream;
            })
            .catch(err => {
                console.error("Error accessing camera: ", err);
            });

        captureButton.addEventListener('click', () => {
            const context = canvas.getContext('2d');
            context.drawImage(video, 0, 0, canvas.width, canvas.height);
            canvas.toBlob(blob => {
                const file = new File([blob], 'capture.png', { type: 'image/png' });
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                imageInput.files = dataTransfer.files;
            }, 'image/png');
        });

        uploadForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(uploadForm);
            const complainValue = complainInput.value.trim(); 
            formData.append('complain', complainValue);

            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(async (position) => {
                    const latitude = position.coords.latitude;
                    const longitude = position.coords.longitude;

                    formData.append('location', JSON.stringify([{ latitude, longitude }]));

                    try {
                        const response = await fetch('/upload', {
                            method: 'POST',
                            body: formData
                        });
                        if (response.ok) {
                            const result = await response.json();
                            alert(result.message);
                        } else {
                            alert('Upload failed');
                        }
                    } catch (error) {
                        console.log('Error uploading file:', error);
                    }
                }, (error) => {
                    alert('Geolocation error: ' + error.message);
                });
            } else {
                alert("Geolocation is not supported by this browser.");
            }
        });
    </script>
</body>

</html>
